# Numele workflow-ului, vizibil în tab-ul "Actions" din GitHub
name: CI Pipeline for QA Project

# Trigger: pornește acest workflow la orice push în branch-ul 'main'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Primul job: rulează testele
  test:
    # Rulează pe o mașină virtuală cu ultima versiune de Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Pasul 1: Descarcă codul din repository pe mașina virtuală
      - name: Checkout code
        uses: actions/checkout@v3

      # Pasul 2: Setează mediul Java (JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Pasul 3: Rulează comanda de testare Maven
      - name: Run Maven tests
        run: mvn test

  # Al doilea job: construiește și publică imaginea Docker
  build-and-push:
    # Rulează pe o mașină virtuală cu ultima versiune de Ubuntu
    runs-on: ubuntu-latest
    
    # Condiție: acest job pornește DOAR dacă job-ul 'test' a trecut cu succes
    needs: test

    steps:
      # Pasul 1: Descarcă codul din repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Pasul 2: Login la Docker Hub folosind secretele configurate în GitHub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Pasul 3: Construiește imaginea Docker și o publică în registrul Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          # Etichetează imaginea cu 'latest' și cu username-ul din secrete
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/qa-final-project-java:latest